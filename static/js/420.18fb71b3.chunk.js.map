{"version":3,"file":"static/js/420.18fb71b3.chunk.js","mappings":"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","sources":["api/requests.js","pages/MovieCard/MovieCard.jsx","pages/MovieCard/MovieCard.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst popularMovieUrl = 'trending/movie/week';\nconst searchByNameUrl = 'search/movie';\n\nconst fetchMovies = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const searchPopularMovies = async () => {\n  const response = await fetchMovies.get(`/${popularMovieUrl}`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesByName = async searchQuery => {\n  const response = await fetchMovies.get(`/${searchByNameUrl}`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovieById = async id => {\n  const response = await fetchMovies.get(`/movie/${id}`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data;\n};\n\nexport const serchMovieCast = async id => {\n  const response = await fetchMovies.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data.cast;\n};\n\nexport const searchMovieReview = async id => {\n  const response = await fetchMovies.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data.results;\n};\n","import { searchMovieById } from 'api/requests';\nimport { useCallback, useRef, useEffect, useState } from 'react';\n\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Container } from 'pages/Layout/Layout.styled';\nimport {\n  Image,\n  Description,\n  Section,\n  CardWrapper,\n  LingGoBack,\n} from './MovieCard.styled';\nimport { StyledLink } from 'pages/Layout/Layout.styled';\n\nconst MovieCard = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const refLocation = useRef(location.state?.from);\n\n  const fetchMovie = useCallback(async () => {\n    try {\n      const response = await searchMovieById(movieId);\n      setMovieDetails(response);\n    } catch (error) {\n      setError(error);\n    }\n  }, [movieId]);\n\n  useEffect(() => {\n    fetchMovie();\n  }, [movieId, fetchMovie]);\n\n  if (error) {\n    return (\n      <Container>\n        <p>Something went wrong...</p>\n      </Container>\n    );\n  }\n\n  if (!movieDetails) {\n    return (\n      <Container>\n        <p>We don't have any reviews for this movie</p>\n      </Container>\n    );\n  }\n  const { title, poster_path, release_date, vote_average, overview, genres } =\n    movieDetails;\n\n  return (\n    <>\n      <Section>\n        <Container>\n          <LingGoBack to={refLocation.current ?? '/'}>Go back</LingGoBack>\n          <CardWrapper>\n            <Image\n              src={\n                poster_path && `https://image.tmdb.org/t/p/w500${poster_path}`\n              }\n              alt={title}\n            />\n            <Description>\n              <h2>\n                {movieDetails\n                  ? `${title}(${new Date(release_date).getFullYear()})`\n                  : null}\n              </h2>\n              <p>User score: {Math.ceil(vote_average * 10)} %</p>\n              <h2>Overview</h2>\n              <p>{overview}</p>\n              <h2>Genres</h2>\n              <p>{genres ? genres.map(genre => genre.name).join(' ') : '-'}</p>\n            </Description>\n          </CardWrapper>\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <StyledLink to={'cast'}>Cast</StyledLink>\n          <StyledLink to={`reviews`}>Reviews</StyledLink>\n        </Container>\n      </Section>\n      <Section>\n        <Outlet />\n      </Section>\n    </>\n  );\n};\nexport default MovieCard;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Section = styled.section`\n  border-bottom: 1px solid rgb(84, 117, 201);\n`;\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  gap: 30px;\n`;\n\nexport const LingGoBack = styled(NavLink)`\n  display: block;\n  text-decoration: none;\n  text-align: center;\n  margin-bottom: 30px;\n  max-width: 100px;\n\n  padding: 10px;\n  color: rgb(84, 117, 201);\n  border-radius: 7px;\n  background-color: #fff;\n  border: 1px solid rgb(84, 117, 201);\n  font-weight: 500;\n  &:hover,\n  &:focus {\n    box-shadow: 0px 0px 33px -10px rgba(0, 0, 84, 0.64);\n  }\n`;\n\nexport const Image = styled.img`\n  width: 300px;\n`;\n\nexport const Navigation = styled.div``;\n\nexport const Description = styled.div`\n  width: 700px;\n`;\n"],"names":["fetchMovies","axios","baseURL","searchPopularMovies","get","params","api_key","response","data","results","searchMoviesByName","searchQuery","query","searchMovieById","id","serchMovieCast","cast","searchMovieReview","movieId","useParams","useState","movieDetails","setMovieDetails","error","setError","location","useLocation","refLocation","useRef","state","from","fetchMovie","useCallback","useEffect","title","poster_path","release_date","vote_average","overview","genres","to","current","src","alt","Date","getFullYear","Math","ceil","map","genre","name","join","Section","styled","CardWrapper","LingGoBack","NavLink","Image","Description"],"sourceRoot":""}