{"version":3,"file":"static/js/736.f23c9410.chunk.js","mappings":"8SAKMA,EAAcC,EAAAA,GAAAA,OAAa,CAC/BC,QAAS,kCAGEC,EAAmB,mCAAG,oGACVH,EAAYI,IAAZ,WARD,uBAQwC,CAC5DC,OAAQ,CACNC,QAAS,sCAHoB,cAC3BC,EAD2B,yBAM1BA,EAASC,KAAKC,SANY,2CAAH,qDASnBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTX,EAAYI,IAAZ,WAhBD,gBAgBwC,CAC5DC,OAAQ,CACNC,QAAS,mCACTM,MAAOD,KAJqB,cAC1BJ,EAD0B,yBAOzBA,EAASC,KAAKC,SAPW,2CAAH,sDAUlBI,EAAe,mCAAG,WAAMC,GAAN,uFACNd,EAAYI,IAAZ,iBAA0BU,GAAM,CACrDT,OAAQ,CACNC,QAAS,sCAHgB,cACvBC,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfO,EAAc,mCAAG,WAAMD,GAAN,uFACLd,EAAYI,IAAZ,iBAA0BU,EAA1B,YAAwC,CAC7DT,OAAQ,CACNC,QAAS,sCAHe,cACtBC,EADsB,yBAMrBA,EAASC,KAAKQ,MANO,2CAAH,sDASdC,EAAiB,mCAAG,WAAMH,GAAN,uFACRd,EAAYI,IAAZ,iBAA0BU,EAA1B,YAAwC,CAC7DT,OAAQ,CACNC,QAAS,sCAHkB,cACzBC,EADyB,yBAMxBA,EAASC,KAAKC,SANU,2CAAH,qD,8JC5CjBS,EAAWC,EAAAA,GAAAA,GAAH,+HAQRC,EAAWD,EAAAA,GAAAA,GAAH,4IAORE,EAAQF,EAAAA,GAAAA,IAAH,4E,2BCwClB,EAlDa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAON,EAAP,KAAaO,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAYC,EAAAA,EAAAA,cAAW,iBAAC,8GAEHd,EAAAA,EAAAA,IAAeW,GAFZ,OAEpBnB,EAFoB,OAG1BgB,EAAQhB,GAHkB,gDAK1BkB,EAAS,EAAD,IALkB,yDAO3B,CAACC,IAMJ,OAJAI,EAAAA,EAAAA,YAAU,WACRF,GACD,GAAE,CAACA,IAEAJ,GAEA,SAAC,KAAD,WACE,sDAMJ,SAACN,EAAD,UACGF,GACCA,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAWpB,EAAlC,EAAkCA,GAAlC,OACP,UAACM,EAAD,YACE,SAACC,EAAD,CACEc,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKL,KAEP,4BACE,wBAAKA,KAEL,uCAAeE,UAZJpB,EADR,KAmBhB,C","sources":["api/requests.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst popularMovieUrl = 'trending/movie/week';\nconst searchByNameUrl = 'search/movie';\n\nconst fetchMovies = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const searchPopularMovies = async () => {\n  const response = await fetchMovies.get(`/${popularMovieUrl}`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesByName = async searchQuery => {\n  const response = await fetchMovies.get(`/${searchByNameUrl}`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovieById = async id => {\n  const response = await fetchMovies.get(`/movie/${id}`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data;\n};\n\nexport const serchMovieCast = async id => {\n  const response = await fetchMovies.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data.cast;\n};\n\nexport const searchMovieReview = async id => {\n  const response = await fetchMovies.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: '7cfdacb6fc50ec091436b65cc18a4ccd',\n    },\n  });\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  list-style: none;\n  /* align-items: center; */\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 150px) / 6);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  height: auto;\n  width: 100%;\n`;\n","import { serchMovieCast } from 'api/requests';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, CastItem, Image } from './Cast.styled';\nimport { Container } from 'pages/Layout/Layout.styled';\nimport image from 'images/images.jpeg';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams();\n\n  const fetchCast = useCallback(async () => {\n    try {\n      const response = await serchMovieCast(movieId);\n      setCast(response);\n    } catch (error) {\n      setError(error);\n    }\n  }, [movieId]);\n\n  useEffect(() => {\n    fetchCast();\n  }, [fetchCast]);\n\n  if (error) {\n    return (\n      <Container>\n        <p>Something went wrong...</p>\n      </Container>\n    );\n  }\n\n  return (\n    <CastList>\n      {cast &&\n        cast.map(({ name, profile_path, character, id }) => (\n          <CastItem key={id}>\n            <Image\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : image\n              }\n              alt={name}\n            />\n            <div>\n              <h2>{name}</h2>\n\n              <p>Character: {character}</p>\n            </div>\n          </CastItem>\n        ))}\n    </CastList>\n  );\n};\nexport default Cast;\n"],"names":["fetchMovies","axios","baseURL","searchPopularMovies","get","params","api_key","response","data","results","searchMoviesByName","searchQuery","query","searchMovieById","id","serchMovieCast","cast","searchMovieReview","CastList","styled","CastItem","Image","useState","setCast","error","setError","movieId","useParams","fetchCast","useCallback","useEffect","map","name","profile_path","character","src","image","alt"],"sourceRoot":""}